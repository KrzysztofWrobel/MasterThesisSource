Size imageSize = gray.size();
    Mat mapx1, mapy1;
    Mat distort;
    double alphaScale = 0;
    Mat output, output1;
//    Mat Kx = K;
    //It works well
//    cv::warpPerspective(gray, output, Kx * rot1a * Kx.inv(), imageSize);
//    cv::warpPerspective(gray1, output1, Kx * rot2a * Kx.inv(), imageSize);
    //Will work on pure points


//    gray = output;
//    gray1 = output1;
//    imshow("Rotated", output);

//    Mat matrix = getOptimalNewCameraMatrix(K, distCoeffs, imageSize, alphaScale);
//    cout << "optimal Kx "<< Kx << endl;
//    cout << "optimal K "<< matrix << endl;
//    initUndistortRectifyMap(K, distort, rot, matrix, imageSize, CV_32FC1, mapx1, mapy1);
//    Mat rotGray;
//    remap(gray, rotGray, mapx1, mapy1, INTER_LINEAR, BORDER_CONSTANT, 0);
//
//    cout << gray.size() <<endl;
//    cout << rotGray.size() <<endl;

//    Mat dst, dst_norm, dst_norm_scaled;
//    dst = Mat::zeros(rotGray.size(), CV_32FC1);

//    /// Detector parameters
//    int thresh = 150;
//    int blockSize = 5;
//    int apertureSize = 3;
//    double k = 0.04;
//
//    /// Detecting corners
//    cornerHarris(gray, dst, blockSize, apertureSize, k, BORDER_DEFAULT);
//
//    /// Normalizing
//    normalize(dst, dst_norm, 0, 255, NORM_MINMAX, CV_32FC1, Mat());
//    convertScaleAbs(dst_norm, dst_norm_scaled);
//
//    /// Drawing a circle around corners
//    for (int j = 0; j < dst_norm.rows; j++) {
//        for (int i = 0; i < dst_norm.cols; i++) {
//            if ((int) dst_norm.at<float>(j, i) > thresh) {
//                circle(dst_norm_scaled, Point(i, j), 5, Scalar(0), 2, 8, 0);
//            }
//        }
//    }
//    /// Showing the result
//    namedWindow("Corners", CV_WINDOW_AUTOSIZE);
//    imshow("Corners", dst_norm_scaled);



//    gray = rotGray;
//    imshow("rotGray", rotGray);


//    undistortPoints(points1Raw, points1, K, distCoeffs);
//    undistortPoints(points2Raw, points2, K, distCoeffs);
//    perspectiveTransform(points1Raw, points1, Kx*rot1a*Kx.inv());
//    perspectiveTransform(points2Raw, points2, Kx*rot2a*Kx.inv());
//    undistortPoints(points1Raw, points1, K, distort);
//    undistortPoints(points2Raw, points2, K, distort);

struct mydata {
    vector<Point2d> points1En;
    vector<Point2d> points2En;
    Mat RInit;
};



void fundfunc(double *p, double *x, int m, int n, void *data) {

    struct mydata *dptr;

    dptr = (struct mydata *) data;

    register int i;

    for (i = 0; i < n; ++i) {
        x[i] = sampson_error(p, dptr->points1En[i].x, dptr->points1En[i].y, dptr->points2En[i].x, dptr->points2En[i].y);
        if (i == 1) {
            cout << "x[i]: " << x[i] << endl;
        }
    }
}

void fundfunc1(double *p, double *x, int m, int n, void *data) {
    struct mydata *dptr;

    dptr = (struct mydata *) data;
    double tx = p[0];
    double ty = p[1];
    double tz = p[2];
    double wx = p[3];
    double wy = p[4];
    double wz = p[5];
    double Rinit1_1 = dptr->RInit.at<double>(0, 0);
    double Rinit1_2 = dptr->RInit.at<double>(0, 1);
    double Rinit1_3 = dptr->RInit.at<double>(0, 2);
    double Rinit2_1 = dptr->RInit.at<double>(1, 0);
    double Rinit2_2 = dptr->RInit.at<double>(1, 1);
    double Rinit2_3 = dptr->RInit.at<double>(1, 2);
    double Rinit3_1 = dptr->RInit.at<double>(2, 0);
    double Rinit3_2 = dptr->RInit.at<double>(2, 1);
    double Rinit3_3 = dptr->RInit.at<double>(2, 2);
    double x1c1;
    double x1c2;
    double x1c3;
    double x2c1;
    double x2c2;
    double x2c3;


    register int i;
    double total = 0;

    for (i = 0; i < n; ++i) {
        x1c1 = dptr->points1En[i].x;
        x1c2 = dptr->points1En[i].y;
        x1c3 = 1;//dptr->points1En[i].z
        x2c1 = dptr->points2En[i].x;
        x2c2 = dptr->points2En[i].y;
        x2c3 = 1; //dptr->points2En[i].z;
        x[i] = -sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) - sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx))));
        total += x[i];
    }
    cout << "totalError: " << total << endl;

}

/* Jacobian of expfunc() */
void jacfundfunc1(double *p, double *jac, int m, int n, void *data) {
    struct mydata *dptr;

    dptr = (struct mydata *) data;
    double tx = p[0];
    double ty = p[1];
    double tz = p[2];
    double wx = p[3];
    double wy = p[4];
    double wz = p[5];
    double Rinit1_1 = dptr->RInit.at<double>(0, 0);
    double Rinit1_2 = dptr->RInit.at<double>(0, 1);
    double Rinit1_3 = dptr->RInit.at<double>(0, 2);
    double Rinit2_1 = dptr->RInit.at<double>(1, 0);
    double Rinit2_2 = dptr->RInit.at<double>(1, 1);
    double Rinit2_3 = dptr->RInit.at<double>(1, 2);
    double Rinit3_1 = dptr->RInit.at<double>(2, 0);
    double Rinit3_2 = dptr->RInit.at<double>(2, 1);
    double Rinit3_3 = dptr->RInit.at<double>(2, 2);
    double x1c1;
    double x1c2;
    double x1c3;
    double x2c1;
    double x2c2;
    double x2c3;

    register int i, j;

    /* fill Jacobian row by row */
    for (i = j = 0; i < n; ++i) {
        x1c1 = dptr->points1En[i].x;
        x1c2 = dptr->points1En[i].y;
        x1c3 = 1;//dptr->points1En[i].z
        x2c1 = dptr->points2En[i].x;
        x2c2 = dptr->points2En[i].y;
        x2c3 = 1; //dptr->points2En[i].z;
        jac[j++] = -sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (-x2c1 * (Rinit2_1 * ty + Rinit3_1 * tz) + Rinit2_1 * tx * x2c2 + Rinit3_1 * tx * x2c3) + x1c2 * (-x2c1 * (Rinit2_2 * ty + Rinit3_2 * tz) + Rinit2_2 * tx * x2c2 + Rinit3_2 * tx * x2c3) + x1c3 * (-x2c1 * (Rinit2_3 * ty + Rinit3_3 * tz) + Rinit2_3 * tx * x2c2 + Rinit3_3 * tx * x2c3)) - sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c2 * (Rinit2_1 * tx * x1c1 + Rinit2_2 * tx * x1c2 + Rinit2_3 * tx * x1c3) + x2c3 * (Rinit3_1 * tx * x1c1 + Rinit3_2 * tx * x1c2 + Rinit3_3 * tx * x1c3) - x2c1 * (x1c1 * (Rinit2_1 * ty + Rinit3_1 * tz) + x1c2 * (Rinit2_2 * ty + Rinit3_2 * tz) + x1c3 * (Rinit2_3 * ty + Rinit3_3 * tz))) + ((x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx))) * (x1c1 * (Rinit2_1 * ty + Rinit3_1 * tz) + x1c2 * (Rinit2_2 * ty + Rinit3_2 * tz) + x1c3 * (Rinit2_3 * ty + Rinit3_3 * tz)) * 2.0 - (Rinit2_1 * tx * x1c1 + Rinit2_2 * tx * x1c2 + Rinit2_3 * tx * x1c3) * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) * 2.0) * 1.0 / sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0) - ((-x2c1 * (Rinit2_1 * ty + Rinit3_1 * tz) + Rinit2_1 * tx * x2c2 + Rinit3_1 * tx * x2c3) * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) * 2.0 + (-x2c1 * (Rinit2_2 * ty + Rinit3_2 * tz) + Rinit2_2 * tx * x2c2 + Rinit3_2 * tx * x2c3) * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0);
        jac[j++] = -sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (-x2c2 * (Rinit1_1 * tx + Rinit3_1 * tz) + Rinit1_1 * ty * x2c1 + Rinit3_1 * ty * x2c3) + x1c2 * (-x2c2 * (Rinit1_2 * tx + Rinit3_2 * tz) + Rinit1_2 * ty * x2c1 + Rinit3_2 * ty * x2c3) + x1c3 * (-x2c2 * (Rinit1_3 * tx + Rinit3_3 * tz) + Rinit1_3 * ty * x2c1 + Rinit3_3 * ty * x2c3)) - sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c1 * (Rinit1_1 * ty * x1c1 + Rinit1_2 * ty * x1c2 + Rinit1_3 * ty * x1c3) + x2c3 * (Rinit3_1 * ty * x1c1 + Rinit3_2 * ty * x1c2 + Rinit3_3 * ty * x1c3) - x2c2 * (x1c1 * (Rinit1_1 * tx + Rinit3_1 * tz) + x1c2 * (Rinit1_2 * tx + Rinit3_2 * tz) + x1c3 * (Rinit1_3 * tx + Rinit3_3 * tz))) + ((x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) * (x1c1 * (Rinit1_1 * tx + Rinit3_1 * tz) + x1c2 * (Rinit1_2 * tx + Rinit3_2 * tz) + x1c3 * (Rinit1_3 * tx + Rinit3_3 * tz)) * 2.0 - (Rinit1_1 * ty * x1c1 + Rinit1_2 * ty * x1c2 + Rinit1_3 * ty * x1c3) * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0) - ((-x2c2 * (Rinit1_1 * tx + Rinit3_1 * tz) + Rinit1_1 * ty * x2c1 + Rinit3_1 * ty * x2c3) * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) * 2.0 + (-x2c2 * (Rinit1_2 * tx + Rinit3_2 * tz) + Rinit1_2 * ty * x2c1 + Rinit3_2 * ty * x2c3) * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0);
        jac[j++] = -sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (-x2c3 * (Rinit1_1 * tx + Rinit2_1 * ty) + Rinit1_1 * tz * x2c1 + Rinit2_1 * tz * x2c2) + x1c2 * (-x2c3 * (Rinit1_2 * tx + Rinit2_2 * ty) + Rinit1_2 * tz * x2c1 + Rinit2_2 * tz * x2c2) + x1c3 * (-x2c3 * (Rinit1_3 * tx + Rinit2_3 * ty) + Rinit1_3 * tz * x2c1 + Rinit2_3 * tz * x2c2)) - sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c1 * (Rinit1_1 * tz * x1c1 + Rinit1_2 * tz * x1c2 + Rinit1_3 * tz * x1c3) + x2c2 * (Rinit2_1 * tz * x1c1 + Rinit2_2 * tz * x1c2 + Rinit2_3 * tz * x1c3) - x2c3 * (x1c1 * (Rinit1_1 * tx + Rinit2_1 * ty) + x1c2 * (Rinit1_2 * tx + Rinit2_2 * ty) + x1c3 * (Rinit1_3 * tx + Rinit2_3 * ty))) - ((-x2c3 * (Rinit1_1 * tx + Rinit2_1 * ty) + Rinit1_1 * tz * x2c1 + Rinit2_1 * tz * x2c2) * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) * 2.0 + (-x2c3 * (Rinit1_2 * tx + Rinit2_2 * ty) + Rinit1_2 * tz * x2c1 + Rinit2_2 * tz * x2c2) * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0) - ((Rinit2_1 * tz * x1c1 + Rinit2_2 * tz * x1c2 + Rinit2_3 * tz * x1c3) * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) * 2.0 + (Rinit1_1 * tz * x1c1 + Rinit1_2 * tz * x1c2 + Rinit1_3 * tz * x1c3) * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0);
        jac[j++] = -sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c2 * (x1c1 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) + x1c2 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) + x1c3 * (Rinit3_3 + Rinit2_3 * wx - Rinit1_3 * wy)) - x2c3 * (x1c1 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz) + x1c2 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz) + x1c3 * (Rinit2_3 - Rinit3_3 * wx + Rinit1_3 * wz))) - sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c2 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) - x2c3 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz)) + x1c2 * (x2c2 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) - x2c3 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz)) + x1c3 * (x2c2 * (Rinit3_3 + Rinit2_3 * wx - Rinit1_3 * wy) - x2c3 * (Rinit2_3 - Rinit3_3 * wx + Rinit1_3 * wz))) - ((x2c2 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) - x2c3 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz)) * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) * 2.0 + (x2c2 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) - x2c3 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz)) * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0) - 1.0 / sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) * (x1c1 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) + x1c2 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) + x1c3 * (Rinit3_3 + Rinit2_3 * wx - Rinit1_3 * wy));
//        jac[j++] = sqrt(pow(x1c1*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x1c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x1c3*(Rinit2_3*(tx*wx+tz*wz)-Rinit1_3*(tz+tx*wy)+Rinit3_3*(tx-tz*wy)),2.0)+pow(x1c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx))+x1c2*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx))+x1c3*(Rinit1_3*(ty*wy+tz*wz)+Rinit2_3*(tz-ty*wx)-Rinit3_3*(ty+tz*wx)),2.0))*(x2c1*(x1c1*(Rinit3_1+Rinit2_1*wx-Rinit1_1*wy)+x1c2*(Rinit3_2+Rinit2_2*wx-Rinit1_2*wy)+x1c3*(Rinit3_3+Rinit2_3*wx-Rinit1_3*wy))-x2c3*(x1c1*(Rinit1_1+Rinit3_1*wy-Rinit2_1*wz)+x1c2*(Rinit1_2+Rinit3_2*wy-Rinit2_2*wz)+x1c3*(Rinit1_3+Rinit3_3*wy-Rinit2_3*wz)))+sqrt(pow(x2c3*(Rinit3_1*(tx*wx+ty*wy)+Rinit1_1*(ty-tx*wz)-Rinit2_1*(tx+ty*wz))+x2c2*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x2c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx)),2.0)+pow(x2c3*(Rinit3_2*(tx*wx+ty*wy)+Rinit1_2*(ty-tx*wz)-Rinit2_2*(tx+ty*wz))+x2c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x2c1*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx)),2.0))*(x1c1*(x2c1*(Rinit3_1+Rinit2_1*wx-Rinit1_1*wy)-x2c3*(Rinit1_1+Rinit3_1*wy-Rinit2_1*wz))+x1c2*(x2c1*(Rinit3_2+Rinit2_2*wx-Rinit1_2*wy)-x2c3*(Rinit1_2+Rinit3_2*wy-Rinit2_2*wz))+x1c3*(x2c1*(Rinit3_3+Rinit2_3*wx-Rinit1_3*wy)-x2c3*(Rinit1_3+Rinit3_3*wy-Rinit2_3*wz)))+((x2c1*(Rinit3_1+Rinit2_1*wx-Rinit1_1*wy)-x2c3*(Rinit1_1+Rinit3_1*wy-Rinit2_1*wz))*(x2c3*(Rinit3_1*(tx*wx+ty*wy)+Rinit1_1*(ty-tx*wz)-Rinit2_1*(tx+ty*wz))+x2c2*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x2c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx)))*2.0+(x2c1*(Rinit3_2+Rinit2_2*wx-Rinit1_2*wy)-x2c3*(Rinit1_2+Rinit3_2*wy-Rinit2_2*wz))*(x2c3*(Rinit3_2*(tx*wx+ty*wy)+Rinit1_2*(ty-tx*wz)-Rinit2_2*(tx+ty*wz))+x2c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x2c1*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx)))*2.0)*1.0/sqrt(pow(x2c3*(Rinit3_1*(tx*wx+ty*wy)+Rinit1_1*(ty-tx*wz)-Rinit2_1*(tx+ty*wz))+x2c2*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x2c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx)),2.0)+pow(x2c3*(Rinit3_2*(tx*wx+ty*wy)+Rinit1_2*(ty-tx*wz)-Rinit2_2*(tx+ty*wz))+x2c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x2c1*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx)),2.0))*(x1c1*(x2c3*(Rinit3_1*(tx*wx+ty*wy)+Rinit1_1*(ty-tx*wz)-Rinit2_1*(tx+ty*wz))+x2c2*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x2c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx)))+x1c2*(x2c3*(Rinit3_2*(tx*wx+ty*wy)+Rinit1_2*(ty-tx*wz)-Rinit2_2*(tx+ty*wz))+x2c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x2c1*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx)))+x1c3*(x2c3*(Rinit3_3*(tx*wx+ty*wy)+Rinit1_3*(ty-tx*wz)-Rinit2_3*(tx+ty*wz))+x2c2*(Rinit2_3*(tx*wx+tz*wz)-Rinit1_3*(tz+tx*wy)+Rinit3_3*(tx-tz*wy))+x2c1*(Rinit1_3*(ty*wy+tz*wz)+Rinit2_3*(tz-ty*wx)-Rinit3_3*(ty+tz*wx))))*(1.0/2.0)+1.0/sqrt(pow(x1c1*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x1c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x1c3*(Rinit2_3*(tx*wx+tz*wz)-Rinit1_3*(tz+tx*wy)+Rinit3_3*(tx-tz*wy)),2.0)+pow(x1c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx))+x1c2*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx))+x1c3*(Rinit1_3*(ty*wy+tz*wz)+Rinit2_3*(tz-ty*wx)-Rinit3_3*(ty+tz*wx)),2.0))*(x2c3*(x1c1*(Rinit3_1*(tx*wx+ty*wy)+Rinit1_1*(ty-tx*wz)-Rinit2_1*(tx+ty*wz))+x1c2*(Rinit3_2*(tx*wx+ty*wy)+Rinit1_2*(ty-tx*wz)-Rinit2_2*(tx+ty*wz))+x1c3*(Rinit3_3*(tx*wx+ty*wy)+Rinit1_3*(ty-tx*wz)-Rinit2_3*(tx+ty*wz)))+x2c2*(x1c1*(Rinit2_1*(tx*wx+tz*wz)-Rinit1_1*(tz+tx*wy)+Rinit3_1*(tx-tz*wy))+x1c2*(Rinit2_2*(tx*wx+tz*wz)-Rinit1_2*(tz+tx*wy)+Rinit3_2*(tx-tz*wy))+x1c3*(Rinit2_3*(tx*wx+tz*wz)-Rinit1_3*(tz+tx*wy)+Rinit3_3*(tx-tz*wy)))+x2c1*(x1c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx))+x1c2*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx))+x1c3*(Rinit1_3*(ty*wy+tz*wz)+Rinit2_3*(tz-ty*wx)-Rinit3_3*(ty+tz*wx))))*(x1c1*(Rinit1_1*(ty*wy+tz*wz)+Rinit2_1*(tz-ty*wx)-Rinit3_1*(ty+tz*wx))+x1c2*(Rinit1_2*(ty*wy+tz*wz)+Rinit2_2*(tz-ty*wx)-Rinit3_2*(ty+tz*wx))+x1c3*(Rinit1_3*(ty*wy+tz*wz)+Rinit2_3*(tz-ty*wx)-Rinit3_3*(ty+tz*wx)))*(x1c1*(Rinit3_1+Rinit2_1*wx-Rinit1_1*wy)+x1c2*(Rinit3_2+Rinit2_2*wx-Rinit1_2*wy)+x1c3*(Rinit3_3+Rinit2_3*wx-Rinit1_3*wy));
        jac[j++] = -sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c1 * (x1c1 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) + x1c2 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) + x1c3 * (Rinit3_3 + Rinit2_3 * wx - Rinit1_3 * wy)) - x2c3 * (x1c1 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz) + x1c2 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz) + x1c3 * (Rinit1_3 + Rinit3_3 * wy - Rinit2_3 * wz))) + sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c1 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) - x2c3 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz)) + x1c2 * (x2c1 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) - x2c3 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz)) + x1c3 * (x2c1 * (Rinit3_3 + Rinit2_3 * wx - Rinit1_3 * wy) - x2c3 * (Rinit1_3 + Rinit3_3 * wy - Rinit2_3 * wz))) + ((x2c1 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) - x2c3 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz)) * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) * 2.0 + (x2c1 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) - x2c3 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz)) * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0) + 1.0 / sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx))) * (x1c1 * (Rinit3_1 + Rinit2_1 * wx - Rinit1_1 * wy) + x1c2 * (Rinit3_2 + Rinit2_2 * wx - Rinit1_2 * wy) + x1c3 * (Rinit3_3 + Rinit2_3 * wx - Rinit1_3 * wy));
        jac[j++] = -sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c1 * (x1c1 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz) + x1c2 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz) + x1c3 * (Rinit2_3 - Rinit3_3 * wx + Rinit1_3 * wz)) - x2c2 * (x1c1 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz) + x1c2 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz) + x1c3 * (Rinit1_3 + Rinit3_3 * wy - Rinit2_3 * wz))) - sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c1 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz) - x2c2 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz)) + x1c2 * (x2c1 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz) - x2c2 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz)) + x1c3 * (x2c1 * (Rinit2_3 - Rinit3_3 * wx + Rinit1_3 * wz) - x2c2 * (Rinit1_3 + Rinit3_3 * wy - Rinit2_3 * wz))) - ((x2c1 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz) - x2c2 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz)) * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) * 2.0 + (x2c1 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz) - x2c2 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz)) * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) * 2.0) * 1.0 / sqrt(pow(x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)), 2.0) + pow(x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)), 2.0)) * (x1c1 * (x2c3 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x2c2 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x2c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx))) + x1c2 * (x2c3 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x2c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x2c1 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx))) + x1c3 * (x2c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz)) + x2c2 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)) + x2c1 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0) + ((x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) * (x1c1 * (Rinit1_1 + Rinit3_1 * wy - Rinit2_1 * wz) + x1c2 * (Rinit1_2 + Rinit3_2 * wy - Rinit2_2 * wz) + x1c3 * (Rinit1_3 + Rinit3_3 * wy - Rinit2_3 * wz)) * 2.0 - (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx))) * (x1c1 * (Rinit2_1 - Rinit3_1 * wx + Rinit1_1 * wz) + x1c2 * (Rinit2_2 - Rinit3_2 * wx + Rinit1_2 * wz) + x1c3 * (Rinit2_3 - Rinit3_3 * wx + Rinit1_3 * wz)) * 2.0) * 1.0 / sqrt(pow(x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy)), 2.0) + pow(x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)), 2.0)) * (x2c3 * (x1c1 * (Rinit3_1 * (tx * wx + ty * wy) + Rinit1_1 * (ty - tx * wz) - Rinit2_1 * (tx + ty * wz)) + x1c2 * (Rinit3_2 * (tx * wx + ty * wy) + Rinit1_2 * (ty - tx * wz) - Rinit2_2 * (tx + ty * wz)) + x1c3 * (Rinit3_3 * (tx * wx + ty * wy) + Rinit1_3 * (ty - tx * wz) - Rinit2_3 * (tx + ty * wz))) + x2c2 * (x1c1 * (Rinit2_1 * (tx * wx + tz * wz) - Rinit1_1 * (tz + tx * wy) + Rinit3_1 * (tx - tz * wy)) + x1c2 * (Rinit2_2 * (tx * wx + tz * wz) - Rinit1_2 * (tz + tx * wy) + Rinit3_2 * (tx - tz * wy)) + x1c3 * (Rinit2_3 * (tx * wx + tz * wz) - Rinit1_3 * (tz + tx * wy) + Rinit3_3 * (tx - tz * wy))) + x2c1 * (x1c1 * (Rinit1_1 * (ty * wy + tz * wz) + Rinit2_1 * (tz - ty * wx) - Rinit3_1 * (ty + tz * wx)) + x1c2 * (Rinit1_2 * (ty * wy + tz * wz) + Rinit2_2 * (tz - ty * wx) - Rinit3_2 * (ty + tz * wx)) + x1c3 * (Rinit1_3 * (ty * wy + tz * wz) + Rinit2_3 * (tz - ty * wx) - Rinit3_3 * (ty + tz * wx)))) * (1.0 / 2.0);

    }
}


const int n = points1En.size(), m = 6; // 40 measurements, 6 parameters
        double p[m], x[n], opts[LM_OPTS_SZ], info[LM_INFO_SZ];
        register int i;
        int ret;


        for (i = 0; i < n; ++i)
            x[i] = 0;

        struct mydata data;
        std::vector<cv::Point2d> points1StUD, points2StUD;
        undistortPoints(points1En, points1StUD, K, distCoeffs);
        undistortPoints(points2En, points2StUD, K, distCoeffs);
        data.points1En = points1StUD;
        data.points2En = points2StUD;
        data.RInit = rotDiffGlobal;

        p[0] = tEnhanced.at<double>(0);
        p[1] = tEnhanced.at<double>(1);
        p[2] = tEnhanced.at<double>(2);
        p[3] = 0;
        p[4] = 0;
        p[5] = 0;

        printf("Init fit parameters: %.7g %.7g %.7g %.7g %.7g %.7g\n", p[0], p[1], p[2], p[3], p[4], p[5]);
        /* optimization control parameters; passing to levmar NULL instead of opts reverts to defaults */
        opts[0] = LM_INIT_MU;
        opts[1] = 1E-15;
        opts[2] = 1E-15;
        opts[3] = 1E-20;
        opts[4] = LM_DIFF_DELTA; // relevant only if the finite difference Jacobian version is used

        /* invoke the optimization function */
//        ret = dlevmar_der(fundfunc1, jacfundfunc1, p, x, m, n, 1000, opts, info, NULL, NULL, &data); // with analytic Jacobian
//        ret = dlevmar_dif(fundfunc1, p, x, m, n, 1000, opts, info, NULL, NULL, &data); // with analytic Jacobian
        Mat tImproved = Mat(3, 1, CV_64FC1);
        tImproved.at<double>(0) = p[0];
        tImproved.at<double>(1) = p[1];
        tImproved.at<double>(2) = p[2];
        Mat dW = Mat(3, 1, CV_64FC1);
        dW.at<double>(0) = p[3];
        dW.at<double>(1) = p[4];
        dW.at<double>(2) = p[5];
        Mat dR = makeSkewMatrix(dW);
        dR.at<double>(0, 0) = 1;
        dR.at<double>(1, 1) = 1;
        dR.at<double>(2, 2) = 1;
        Mat rotImproved = dR * rotDiffGlobal;

        Mat tSkew = makeSkewMatrix(tImproved);
        cout << "Skew : " << tSkew << endl;
        cout << "Skew inv: " << tSkew.inv() << endl;
        FImproved = K.inv().t() * tSkew * rotImproved * K.inv();
        FImproved.convertTo(FImproved, CV_64FC1);
        FImproved = FImproved / FImproved.at<double>(8);
//
//        FImproved = constructFundamentalMatrix(rotImproved, tImproved, K);
        cout << "F improved" << FImproved << endl;
        printf("Levenberg-Marquardt returned in %g iter, reason %g, sumsq %g [%g]\n", info[5], info[6], info[1], info[0]);
        printf("Best fit parameters: %.7g %.7g %.7g %.7g %.7g %.7g\n", p[0], p[1], p[2], p[3], p[4], p[5]);

        //    cv::Mat_<double> rvec(1, 3);
        //    cv::Mat_<double> rvec1(1, 3);
        //    Rodrigues(Ro, rvec);
        //    Rodrigues(rotDiffGlobal, rvec1);


        //        Mat_<double> KP1 = K * Mat(P1);
        //        for (int i = 0; i < prev_points_raw.size(); i++) {
        //            Point2d kp = prev_points_raw[i];
        //            Point3d u(kp.x, kp.y, 1.0);
        //            Mat_<double> um = KInv * Mat_<double>(u);
        //            u.x = um(0);
        //            u.y = um(1);
        //            u.z = um(2);
        //
        //            Point2d kp1 = next_points_raw[i];
        //            Point3d u1(kp1.x, kp1.y, 1.0);
        //            Mat_<double> um1 = KInv * Mat_<double>(u1);
        //            u1.x = um1(0);
        //            u1.y = um1(1);
        //            u1.z = um1(2);
        //
        //            Mat_<double> X = IterativeLinearLSTriangulation(u, P1, u1, P2);
        ////            Mat_<double> xPt_img = KP1 * X;				//reproject
        ////		cout <<	"Point * K: " << xPt_img << endl;
        ////            Point2f xPt_img_(xPt_img(0)/xPt_img(2),xPt_img(1)/xPt_img(2));
        //
        //            {
        ////                double reprj_err = norm(xPt_img_-kp1);
        ////                reproj_error.push_back(reprj_err);
        //
        ////                CloudPoint cp;
        ////                cp.pt = Point3d(X(0),X(1),X(2));
        ////                cp.reprojection_error = reprj_err;
        ////
        ////                pointcloud.push_back(cp);
        ////                correspImg1Pt.push_back(pt_set1[i]);
        //            }
        //            Mat newRow = Mat::ones(1,4, CV_64FC1);
        //            newRow.at<double>(0) = X(0);
        //            newRow.at<double>(1) = X(1);
        //            newRow.at<double>(2) = X(2);
        //            XP.push_back(newRow);
        //
        //        }